# Based on template: railties/lib/rails/generators/rails/app/templates/Dockerfile.tt
# And on this guide: https://mailsnag.com/blog/optimized-ruby-dockerfile/

# Run this script with --mount option targeting to your application directory.
# Application directory maps to "/rails" directory in container. Example:
# docker run \
#   --mount src=/srv/app,dst=/rails,type=bind \
#   --mount src=bundler,dst=/usr/local/bundler,type=volume \
#   -d project-tag
# (replace "/srv/app" to application directory and "project-tag" to your project name).

<% args.each do |k, v| %><%= "ARG #{k}=#{v}\n" %><% end %>

# @see https://github.com/docker-library/ruby/blob/master/Dockerfile.template
FROM ruby:$RUBY_VERSION-alpine AS base

# See documentation for CLI for APK:
# https://git.alpinelinux.org/apk-tools/about/doc/apk.8.scd
# https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper

# Download package index (we use it to install packages). It takes 1 minute.
# This index has size about 2.2 MB.
RUN set -eux; \
    apk update

# Install tools for building gems with extensions. It takes up to 1900 s (31 minutes).
RUN set -eux; \
    apk add g++ make

# Install common packages for Rails application. It takes up to ? s (? minutes).
RUN set -eux; \
    apk add jemalloc tzdata
<% if !system_packages.empty? %>

# Install specific packages for Rails application. It takes about 1100 s (18 minutes).
RUN set -eux; \
    apk add <%= system_packages.join(" ") %>
<% end %>

WORKDIR /rails

# Russian CAs
ADD https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt \
    /usr/local/share/ca-certificates/russian_trusted_root_ca_pem.crt
RUN /usr/sbin/update-ca-certificates

<%= "ENV \\\n#{envs.join(" \\\n")}\n\n" %>
# Install required Bundler version.
RUN gem install bundler:<%= bundler_version %>

<% if includes_yarn || includes_bun %>
#==================
<% end %>
<% if includes_yarn %>

# Force to download Yarn.
RUN npm install -g corepack \
    && corepack enable \
    && corepack install
<% end %>
<% if includes_bun %>

# Based on shell script: https://bun.sh/install
ADD https://github.com/oven-sh/bun/releases/download/bun-v<%= bun_version %>/bun-linux-x64.zip \
    /tmp/bun.zip
RUN unzip -qd /tmp/bun /tmp/bun.zip \
    && chmod +x /tmp/bun/bun \
    && mv /tmp/bun/bun /usr/local/bin/ \
    && rm -rf /tmp/bun /tmp/bun.zip
<% end %>

#==================

ENV RAILS_ENV=development<%= " \\\n    NODE_ENV=development" if includes_frontend %>

# Enable YJIT everywhere.
# Or call this at the end of application initialization (in Ruby code):
#   RubyVM::YJIT.enable
# @see https://docs.ruby-lang.org/en/master/yjit/yjit_md.html#label-Usage
ENV RUBY_YJIT_ENABLE=1

RUN echo "Don't forget to use --mount!"

HEALTHCHECK --timeout=3s CMD wget http://localhost:3000/up
EXPOSE 3000
CMD ["bin/rails", "s", "-p", "3000", "-b", "0.0.0.0"]
