# syntax = docker/dockerfile:1

ARG BASE_IMAGE=ruby:<%= ruby_version %>

#==================
# Intermediate image that has needed packages
FROM $BASE_IMAGE AS base

ARG PACKAGES="build-essential cmake git libjemalloc2 pkg-config ssmtp"
ARG PACKAGES="${PACKAGES} iproute2 less net-tools nano screen telnet tmux vim"
<% if includes_yarn %>
ARG PACKAGES="${PACKAGES} curl nodejs npm"
<% end %>
<% if includes_bun %>
ARG PACKAGES="${PACKAGES} unzip"
<% end %>
<%
# Use it if you want to build Node.js from sources, not to use binaries from APT repos.
# And add build step for Node.js.
# if includes_yarn
# ARG PACKAGES="${PACKAGES} node-gyp python-is-python3"
# end
%>
<% if database_packages %>
ARG PACKAGES="${PACKAGES} <%= database_packages %>"
<% end %>
<% if add_chromium %>
ARG PACKAGES="${PACKAGES} libasound2 libatk1.0-0 libatk-bridge2.0-0 libatspi2.0-0 libcups2 libdbus-1-3 libgtk-3-0 libnspr4 libnss3 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxfixes3 libxi6 libxrandr2 libxss1 libxtst6"
<% end %>
<% if includes_active_storage %>
ARG PACKAGES="${PACKAGES} libvips"
<% end %>

RUN --mount=type=cache,uid=1000,target=/var/cache/apt \
    apt-get update -qq && \
    apt-get install --no-install-recommends -y ${PACKAGES} && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Sendmail
ARG SSMTP_RELAY_HOST_PORT
RUN sed -i "s/mailhub=mail/mailhub=${SSMTP_RELAY_HOST_PORT}/" /etc/ssmtp/ssmtp.conf

# Russian CAs
RUN wget --quiet https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt \
    -O /usr/local/share/ca-certificates/russian_trusted_root_ca_pem.crt && \
    /usr/sbin/update-ca-certificates

RUN groupadd -g 1000 app && \
    useradd -u 1000 -g 1000 -m app --shell /bin/bash

# Application directory: /rails
RUN mkdir -m 0755 /rails
WORKDIR /rails
RUN mkdir -p -m 0755 vendor/bundle .bundle tmp/pids tmp/storage log storage && chown -R app:app .

<% if includes_yarn %>
RUN --mount=type=cache,uid=1000,target=/rails \
    npm install -g corepack && \
    corepack enable
<% end %>
<% if includes_bun %>
ENV BUN_INSTALL=/usr/local/bun
ENV PATH=/usr/local/bun/bin:$PATH
# TODO: Specify version - `bash -s -- "${BUN_VERSION}"`
curl -fsSL https://bun.sh/install | bash
<% end %>

RUN gem install bundler:<%= bundler_version %>

#==================
# Install gems and clean up
FROM base AS gems

WORKDIR /rails
COPY Gemfile Gemfile.lock ./
COPY .bundle/config.production .bundle/config

RUN --mount=type=secret,id=ssh_prv_key_file,target=/root/.ssh/id_rsa \
    mkdir -p /root/.ssh && \
    chmod 0700 /root/.ssh && \
    ssh-keyscan github.com >> /root/.ssh/known_hosts

RUN bundle install

<% if includes_frontend %>
#==================
# Install front-end packages
FROM base AS front_end

WORKDIR /rails

<% if includes_yarn %>
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile
<% end %>
<% if includes_bun %>
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile
<% end %>
<% end %>

#==================
# Application
FROM base

# Switching to dedicated user
WORKDIR /rails
USER app

COPY --chown=app:app . /rails
COPY .bundle/config.production .bundle/config
COPY --chown=app:app --from=gems /usr/local/bundle/ /usr/local/bundle/
COPY --chown=app:app --from=gems /rails/vendor/bundle /rails/vendor/bundle
<% if includes_yarn %>
COPY --chown=app:app --from=front_end /rails/.yarn /rails/.yarn
<% if has_node_modules %>COPY --chown=app:app --from=front_end /rails/node_modules /rails/<% end %>
<% end %>

ARG RAILS_ENV

<% if includes_sidekiq %>
RUN bin/rails sidekiq:merge_configs
<% end %>

<% if includes_frontend %>
RUN echo "Pre-compiling assets with RAILS_ENV=$RAILS_ENV" && \
    bin/rails assets:precompile --silent
<% end %>

### build version args
ARG VERSION_BUILD_DATE
ARG VERSION_BUILD_JOB_NUMBER
ARG VERSION_BRANCH
ARG VERSION_TAG
ARG VERSION_SHA

ENV VERSION_BUILD_DATE=${VERSION_BUILD_DATE} \
    VERSION_BUILD_JOB_NUMBER=${VERSION_BUILD_JOB_NUMBER} \
    VERSION_BRANCH=${VERSION_BRANCH} \
    VERSION_TAG=${VERSION_TAG} \
    VERSION_SHA=${VERSION_SHA}

EXPOSE 3000
CMD bin/rails s -p 3000 -b '0.0.0.0'
