# syntax = docker/dockerfile:1
# Based on template: railties/lib/rails/generators/rails/app/templates/Dockerfile.tt
# And on this guide: https://mailsnag.com/blog/optimized-ruby-dockerfile/

# Example: 3.3.4
ARG RUBY_VERSION=<%= ruby_version %>

# @see https://github.com/docker-library/ruby/blob/master/Dockerfile.template
FROM ruby:$RUBY_VERSION-alpine AS base

WORKDIR /rails

ENV \
<% if includes_frontend %>
    NODE_ENV=production \
<% end %>
    RAILS_ENV=production \
    RAILS_PORT=3000

RUN addgroup -g 1000 app \
    && adduser -u 1000 -G app app -s /bin/sh -D -H

RUN mkdir -p -m 0755 .bundle log tmp/pids vendor/bundle <% if includes_active_storage %>storage tmp/storage <% end %>\
    && chown -R app:app .

# See documentation for CLI for APK:
# https://git.alpinelinux.org/apk-tools/about/doc/apk.8.scd
# https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper

RUN set -eux; \
	apk add --no-cache <%= system_packages.join(" ") %>

# Russian CAs
RUN wget --quiet https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt \
    -O /usr/local/share/ca-certificates/russian_trusted_root_ca_pem.crt \
    && /usr/sbin/update-ca-certificates

<% if includes_yarn %>
RUN --mount=type=cache,uid=1000,target=/rails \
    npm install -g corepack \
    && corepack enable
<% end %>
<% if includes_bun %>
# Based on shell script: https://bun.sh/install
ENV BUN_INSTALL=/usr/local/bin
RUN wget --quiet \
    https://github.com/oven-sh/bun/releases/download/bun-v<%= bun_version %>/bun-linux-x64.zip \
    -O /tmp/bun.zip \
    && unzip -qd /tmp/bun /tmp/bun.zip \
    && chmod +x /tmp/bun/bun \
    && mv /tmp/bun/bun $BUN_INSTALL/ \
    && rm -rf /tmp/bun /tmp/bun.zip
<% end %>

RUN gem install bundler:<%= bundler_version %>

#==================
# Install gems and clean up
FROM base AS gems

<% if bundle_config_prod %>COPY .bundle/config.production .bundle/config<% end %>

COPY Gemfile Gemfile.lock ./

RUN bundle install \
    <% if use_bootsnap %>&& bundle exec bootsnap precompile --gemfile \<% end %>
    && rm -rf /usr/local/bundle/cache/*

<% if includes_frontend %>
#==================
# Install front-end packages
FROM base AS front_end

<% if includes_yarn %>
COPY package.json yarn.lock .yarn ./
RUN yarn install --frozen-lockfile \
    && rm -rf .yarn/cache
<% end %>
<% if includes_bun %>
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile
<% end %>
<% end %>

#==================
# Application
FROM base

# Switching to dedicated user
USER app

ENV LD_PRELOAD="libjemalloc.so.2" \
    MALLOC_CONF="background_thread:true,metadata_thp:auto,dirty_decay_ms:5000,muzzy_decay_ms:5000,narenas:2"

COPY --chown=app:app --from=gems /usr/local/bundle/ /usr/local/bundle/
COPY --chown=app:app --from=gems vendor/bundle/ vendor/bundle/
<% if includes_yarn %>
COPY --chown=app:app --from=front_end .yarn/ .yarn/
<% if includes_frontend %>

# WARNING: In general case this directory (node_modules) is not needed after assets compilation,
# but some tools require files from this directory in runtime (i.e. in browser).
COPY --chown=app:app --from=front_end node_modules .
<% end %>
<% end %>
<% if use_bootsnap %>

RUN bundle exec bootsnap precompile app/ lib/
<% end %>

# Enable YJIT everywhere.
# Or call this at the end of application initialization (in Ruby code):
#   RubyVM::YJIT.enable
# @see https://docs.ruby-lang.org/en/master/yjit/yjit_md.html#label-Usage
ENV RUBY_YJIT_ENABLE=1

COPY --chown=app:app . .
<% if includes_sidekiq %>

RUN bin/rails sidekiq:merge_configs
<% end %>
<% if includes_frontend %>

RUN echo "Pre-compiling assets with RAILS_ENV=$RAILS_ENV" \
    && SECRET_KEY_BASE_DUMMY=1 bin/rails assets:precompile --silent
<% end %>

ENTRYPOINT ["/rails/bin/docker-entrypoint"]
EXPOSE $RAILS_PORT
CMD bin/rails s -p $RAILS_PORT -b '0.0.0.0'
