# syntax = docker/dockerfile:1
# Based on template: railties/lib/rails/generators/rails/app/templates/Dockerfile.tt
# And on this guide: https://mailsnag.com/blog/optimized-ruby-dockerfile/

<% arg.each do |k, v| %><%= "ARG #{k}=#{v}\n" %><% end %>

# @see https://github.com/docker-library/ruby/blob/master/Dockerfile.template
FROM ruby:$RUBY_VERSION-alpine AS base

# Install tools for building gems with extensions. It takes up to 2000 s (32 minutes).
RUN set -eux; \
	apk add --no-cache g++ make

WORKDIR /rails

<%= "ENV \\\n#{env[:initial].join(" \\\n")}\n\n" if env[:initial] %>
RUN addgroup -g 1000 app \
    && adduser -u 1000 -G app app -s /bin/sh -D -H

RUN mkdir -p -m 0755 <%= required_dirs.join(" ") %> \
    && chown -R app:app .

# See documentation for CLI for APK:
# https://git.alpinelinux.org/apk-tools/about/doc/apk.8.scd
# https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper

# Install specific packages for Rails application. It takes about 1000 s (16 minutes).
RUN set -eux; \
	apk add --no-cache <%= system_packages.join(" ") %>

# Russian CAs
ADD https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt \
    /usr/local/share/ca-certificates/russian_trusted_root_ca_pem.crt
RUN /usr/sbin/update-ca-certificates

<%= "ENV \\\n#{env[:prebuild_ruby_gems].join(" \\\n")}\n\n" if env[:prebuild_ruby_gems] %>
# Install required Bundler version.
RUN gem install bundler:<%= bundler_version %>

#==================

FROM base AS compilation

<% if bundle_config_prod %>
COPY .bundle/config.production .bundle/config
<% end %>
COPY Gemfile Gemfile.lock ./

# Install gems for Rails application. It takes about 1000 s (16 minutes) or more.
RUN bundle install \
    && rm -rf /usr/local/bundle/cache/*
<% if use_bootsnap %>

RUN bundle exec bootsnap precompile --gemfile
<% end %>
<% if includes_frontend %>
<% if includes_yarn %>

# Force to download Yarn.
RUN npm install -g corepack \
    && corepack enable \
    && corepack install

COPY package.json yarn.lock .yarn ./

RUN yarn install --immutable
<% end %>
<% if includes_bun %>

# Based on shell script: https://bun.sh/install
ADD https://github.com/oven-sh/bun/releases/download/bun-v<%= bun_version %>/bun-linux-x64.zip \
    /tmp/bun.zip
RUN unzip -qd /tmp/bun /tmp/bun.zip \
    && chmod +x /tmp/bun/bun \
    && mv /tmp/bun/bun /usr/local/bin/ \
    && rm -rf /tmp/bun /tmp/bun.zip

COPY package.json bun.lockb ./

RUN bun install --frozen-lockfile
<% end %>
<% end %>

#==================

FROM base

# Switching to dedicated user
USER app

COPY --from=compilation /usr/local/bundle/ /usr/local/bundle/
<% if includes_yarn %>
COPY --chown=app:app --from=compilation .yarn/ .yarn/
<% if has_node_modules %>

# WARNING: In general case this directory (node_modules) is not needed after assets compilation,
# but some tools require files from this directory in runtime (i.e. in browser).
COPY --from=compilation node_modules ./
<% end %>
<% end %>

COPY . .
<% if use_bootsnap %>

RUN bundle exec bootsnap precompile app/ lib/
<% end %>

# Enable YJIT everywhere.
# Or call this at the end of application initialization (in Ruby code):
#   RubyVM::YJIT.enable
# @see https://docs.ruby-lang.org/en/master/yjit/yjit_md.html#label-Usage
ENV RUBY_YJIT_ENABLE=1
<% if includes_sidekiq %>

RUN bin/rails sidekiq:merge_configs
<% end %>
<% if includes_frontend %>

RUN echo "Pre-compiling assets with RAILS_ENV=$RAILS_ENV" \
    && SECRET_KEY_BASE_DUMMY=1 bin/rails assets:precompile --silent
<% if includes_yarn %>

RUN rm -rf .yarn/cache
<% end %>
<% end %>

HEALTHCHECK --timeout=3s CMD wget http://localhost:${RAILS_PORT}/up
ENTRYPOINT ["/rails/bin/docker-entrypoint"]
EXPOSE $RAILS_PORT
CMD ["bin/rails", "s", "-p", "$RAILS_PORT", "-b", "0.0.0.0"]
