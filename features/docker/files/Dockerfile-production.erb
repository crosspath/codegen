# Based on template: railties/lib/rails/generators/rails/app/templates/Dockerfile.tt
# And on this guide: https://mailsnag.com/blog/optimized-ruby-dockerfile/

<% args.each do |k, v| %><%= "ARG #{k}=#{v}\n" %><% end %>

# @see https://github.com/docker-library/ruby/blob/master/Dockerfile.template
FROM ruby:$RUBY_VERSION-alpine AS base

# See documentation for CLI for APK:
# https://git.alpinelinux.org/apk-tools/about/doc/apk.8.scd
# https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper

# Download package index (we use it to install packages). It takes 4s.
# This index has size about 2.2 MB.
RUN set -eux; \
    apk update

# Install common packages for Rails application. It takes about 3s.
RUN set -eux; \
    apk add jemalloc tzdata

# Install required Bundler version.
RUN gem install bundler:<%= bundler_version %>

WORKDIR /rails

RUN addgroup -g 1000 app \
    && adduser -u 1000 -G app app -s /bin/sh -D -H

RUN mkdir -p -m 0755 <%= required_dirs.join(" ") %> \
    && chown -R app:app .

#==================

FROM base as runtime
<% if !runtime_packages.empty? %>

# Install specific packages for Rails application (required for runtime). It takes about 12s.
RUN set -eux; \
    apk add <%= runtime_packages.join(" ") %>
<% end %>

# Russian CAs
ADD https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt \
    /usr/local/share/ca-certificates/russian_trusted_root_ca_pem.crt
RUN /usr/sbin/update-ca-certificates

<%= "ENV \\\n#{envs.join(" \\\n")}\n" %>

#==================

FROM base AS build

# Install tools for building gems with extensions. It takes about 15s.
RUN set -eux; \
    apk add g++ make
<% if !build_time_packages.empty? %>

# Install specific packages for Rails application (required for build). It takes about 7s.
RUN set -eux; \
    apk add <%= build_time_packages.join(" ") %>
<% end %>

WORKDIR /rails

<% if bundle_config_prod %>
COPY .bundle/config.production .bundle/config
<% end %>
COPY Gemfile Gemfile.lock ./

# Install gems for Rails application. It takes about 37s for new project.
RUN bundle install \
    && rm -rf /usr/local/bundle/cache/*
<% if use_bootsnap %>

RUN bundle exec bootsnap precompile --gemfile
<% end %>
<% if includes_frontend %>
<% if includes_yarn %>

COPY package.json yarn.lock .yarn ./

# Force to download Yarn.
RUN npm install -g corepack \
    && corepack enable \
    && corepack install

RUN yarn install --immutable
<% end %>
<% if includes_bun %>

# Based on shell script: https://bun.sh/install
ADD https://github.com/oven-sh/bun/releases/download/bun-v<%= bun_version %>/bun-linux-x64.zip \
    /tmp/bun.zip
RUN unzip -qd /tmp/bun /tmp/bun.zip \
    && chmod +x /tmp/bun/bun \
    && mv /tmp/bun/bun /usr/local/bin/ \
    && rm -rf /tmp/bun /tmp/bun.zip

COPY package.json bun.lockb ./

RUN bun install --frozen-lockfile
<% end %>
<% end %>

COPY . .

RUN <<SHELL
    set -eux
<% if use_bootsnap %>
    bundle exec bootsnap precompile app/ lib/
<% end %>
<% if includes_frontend %>
    SECRET_KEY_BASE_DUMMY=1 bin/rails assets:precompile --silent
<% if includes_yarn %>
    # WARNING: In general case directory "node_modules" is not needed after assets compilation,
    # but some tools require files from this directory in runtime (i.e. in browser).
    rm -rf .yarn/cache .yarnrc.yml yarn.lock node_modules
<% end %>
<% end %>
    rm -rf .bundle
SHELL

#==================

FROM runtime

WORKDIR /rails

# Switch to dedicated user.
USER app

COPY --from=build /usr/local/bundle/ /usr/local/bundle/
COPY --from=build --chown=app:app /rails /rails

ENV RAILS_ENV=production<%= " \\\n    NODE_ENV=production" if includes_frontend %>

# Enable YJIT everywhere.
# Or call this at the end of application initialization (in Ruby code):
#   RubyVM::YJIT.enable
# @see https://docs.ruby-lang.org/en/master/yjit/yjit_md.html#label-Usage
ENV RUBY_YJIT_ENABLE=1

HEALTHCHECK --timeout=3s CMD wget http://localhost:3000/up
ENTRYPOINT ["/rails/bin/docker-entrypoint"]
EXPOSE 3000
CMD ["bin/rails", "s", "-p", "3000", "-b", "0.0.0.0"]
